import pygame
import random
import math
import os

# Initialize Pygame and mixer
pygame.init()
pygame.mixer.init()

# Constants
WIDTH = 1000  # Increased from 800
HEIGHT = 750  # Increased from 600
FPS = 60

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)
YELLOW = (255, 255, 0)
RED = (255, 0, 0)
BROWN = (139, 69, 19)
GRAY = (128, 128, 128)
LIGHT_BROWN = (205, 133, 63)
BLUE = (0, 0, 255)
HAY_BALE_COLOR = (245, 222, 179)
FENCE_COLOR = (139, 69, 19)
CROP_CIRCLE_COLOR = (50, 205, 50)
DARK_GREEN = (0, 100, 0)
DARK_RED = (139, 0, 0)
SKY_GRADIENT_TOP = (20, 20, 50)
SKY_GRADIENT_BOTTOM = (50, 50, 100)

# Set up display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Alien Cow Abduction")

# Create sky gradient surface
sky_surface = pygame.Surface((WIDTH, HEIGHT - 50))
for y in range(HEIGHT - 50):
    r = SKY_GRADIENT_TOP[0] + (SKY_GRADIENT_BOTTOM[0] - SKY_GRADIENT_TOP[0]) * y / (HEIGHT - 50)
    g = SKY_GRADIENT_TOP[1] + (SKY_GRADIENT_BOTTOM[1] - SKY_GRADIENT_TOP[1]) * y / (HEIGHT - 50)
    b = SKY_GRADIENT_TOP[2] + (SKY_GRADIENT_BOTTOM[2] - SKY_GRADIENT_TOP[2]) * y / (HEIGHT - 50)
    pygame.draw.line(sky_surface, (int(r), int(g), int(b)), (0, y), (WIDTH, y))

# Global sound state
sound_enabled = True
base_volumes = {}
TOGGLE_SOUND_KEY = pygame.K_m

# Load sound effects with reduced volume (75% reduction)
try:
    MOO_SOUND = pygame.mixer.Sound("moo.wav")
    base_volumes[MOO_SOUND] = 0.03125 * 0.25
    MOO_SOUND.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    FART_SOUND = pygame.mixer.Sound("fart.wav")
    base_volumes[FART_SOUND] = 0.03125 * 0.25
    FART_SOUND.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    LASER_SOUND = pygame.mixer.Sound("laser.wav")
    base_volumes[LASER_SOUND] = 0.03125 * 0.25
    LASER_SOUND.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    SHOTGUN_SOUND = pygame.mixer.Sound("shotgun.wav")
    base_volumes[SHOTGUN_SOUND] = 0.01875 * 0.25
    SHOTGUN_SOUND.set_volume(0.01875 * 0.25 if sound_enabled else 0.0)
    LEVEL_UP_SOUND = pygame.mixer.Sound("level_up.wav")
    base_volumes[LEVEL_UP_SOUND] = 0.03125 * 0.25
    LEVEL_UP_SOUND.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    GRUNT_SOUNDS = [
        pygame.mixer.Sound("grunt.wav"),
        pygame.mixer.Sound("grunt2.wav"),
        pygame.mixer.Sound("grunt3.wav")
    ]
    for grunt in GRUNT_SOUNDS:
        base_volumes[grunt] = 0.03125 * 0.25
        grunt.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    UFO_SOUNDS = [
        pygame.mixer.Sound("ufo1.wav"),
        pygame.mixer.Sound("ufo2.wav"),
        pygame.mixer.Sound("ufo3.wav")
    ]
    for ufo_sound in UFO_SOUNDS:
        base_volumes[ufo_sound] = 0.03125 * 0.25
        ufo_sound.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    INTRO_SOUND = pygame.mixer.Sound("intro.wav")
    base_volumes[INTRO_SOUND] = 0.03125 * 0.25
    INTRO_SOUND.set_volume(0.03125 * 0.25 if sound_enabled else 0.0)
    INTRO_SOUND.play()

    pygame.mixer.music.load("background_music.wav")
    pygame.mixer.music.set_volume(0.1 * 0.25 if sound_enabled else 0.0)
    pygame.mixer.music.play(-1)
except FileNotFoundError as e:
    print(f"Sound files not found: {e}")
    MOO_SOUND = FART_SOUND = LASER_SOUND = SHOTGUN_SOUND = LEVEL_UP_SOUND = None
    GRUNT_SOUNDS = [None] * 3
    UFO_SOUNDS = [None] * 3
    INTRO_SOUND = None

# Define Classes
class UFO:
    def __init__(self):
        self.width = 100
        self.height = 50
        self.x = float(WIDTH // 2 - self.width // 2)
        self.y = 50.0
        self.speed = 5
        self.health = 100
        self.max_health = 100
        self.shoot_timer = 0
        self.shoot_interval = 30
        self.shields = 100
        self.max_shields = 100
        self.shield_regen = 0.5
        self.force_field_active = False

    def draw(self):
        pygame.draw.ellipse(screen, DARK_GREEN, (int(self.x), int(self.y), self.width, self.height))
        pygame.draw.ellipse(screen, GREEN, (int(self.x + 5), int(self.y + 5), self.width - 10, self.height - 10))
        pygame.draw.arc(screen, GRAY, (int(self.x + 20), int(self.y - 20), 60, 40), 0, 3.14, 3)
        pygame.draw.ellipse(screen, (0, 128, 0), (int(self.x + 25), int(self.y + 5), 50, 30))
        pygame.draw.circle(screen, BLACK, (int(self.x + 40), int(self.y + 15)), 8)
        pygame.draw.circle(screen, BLACK, (int(self.x + 60), int(self.y + 15)), 8)
        pygame.draw.circle(screen, YELLOW, (int(self.x + 20), int(self.y + self.height)), 5)
        pygame.draw.circle(screen, RED, (int(self.x + self.width - 20), int(self.y + self.height)), 5)
        pygame.draw.rect(screen, BLACK, (int(self.x - 2), int(self.y - 32), self.width + 4, 7), 1)
        pygame.draw.rect(screen, RED, (int(self.x), int(self.y - 30), self.width, 5))
        pygame.draw.rect(screen, GREEN, (int(self.x), int(self.y - 30), (self.health / self.max_health) * self.width, 5))
        pygame.draw.rect(screen, BLACK, (int(self.x - 2), int(self.y - 42), self.width + 4, 7), 1)
        pygame.draw.rect(screen, BLUE, (int(self.x), int(self.y - 40), self.width, 5))
        pygame.draw.rect(screen, (0, 191, 255), (int(self.x), int(self.y - 40), (self.shields / self.max_shields) * self.width, 5))
        if self.force_field_active:
            pygame.draw.ellipse(screen, (0, 191, 255, 128), (int(self.x - 10), int(self.y - 10), self.width + 20, self.height + 20), 3)

    def move(self, x_direction, y_direction):
        self.x += self.speed * x_direction
        self.y += self.speed * y_direction
        self.x = max(0, min(self.x, WIDTH - self.width))
        # Prevent UFO from going below rancher height
        self.y = max(0, min(self.y, HEIGHT - self.height - 50 - 40))  # 40 is rancher height

    def shoot(self, ranchers):
        if self.shoot_timer <= 0 and len(ranchers) > 0:
            nearest_rancher = min(ranchers, key=lambda r: math.dist((self.x + self.width//2, self.y), (r.x + r.width//2, r.y)) if r.alive else float('inf'))
            bullets.append(DeathRay(self.x + self.width//2, self.y + self.height, nearest_rancher))
            if LASER_SOUND and sound_enabled:
                LASER_SOUND.play()
            self.shoot_timer = self.shoot_interval

    def update_shields(self):
        if not self.force_field_active and self.shields < self.max_shields:
            self.shields = min(self.max_shields, self.shields + self.shield_regen)
        if self.force_field_active and self.shields > 0:
            self.shields -= 0.5
            if self.shields <= 0:
                self.force_field_active = False

class Cow:
    def __init__(self):
        self.width = 40
        self.height = 30
        self.x = float(random.randint(0, WIDTH - self.width))
        self.y = float(HEIGHT - self.height - 50)
        self.speed = random.uniform(0.5, 1.0)
        self.direction = random.choice([-1, 1])
        self.abducted = False
        self.abduction_height = 0
        self.fart_active = False
        self.fart_timer = 0
        self.fart_size = 0

    def draw(self):
        pygame.draw.rect(screen, WHITE, (int(self.x), int(self.y), self.width, self.height))
        pygame.draw.circle(screen, BLACK, (int(self.x + 10), int(self.y + 10)), 5)
        pygame.draw.circle(screen, BLACK, (int(self.x + 30), int(self.y + 20)), 4)
        pygame.draw.rect(screen, WHITE, (int(self.x + 10), int(self.y - 10), 20, 10))
        pygame.draw.circle(screen, BLACK, (int(self.x + 15), int(self.y - 5)), 2)
        pygame.draw.rect(screen, WHITE, (int(self.x + 5), int(self.y + self.height), 5, 10))
        pygame.draw.rect(screen, WHITE, (int(self.x + 30), int(self.y + self.height), 5, 10))
        pygame.draw.line(screen, BLACK, (int(self.x + self.width), int(self.y + 10)), (int(self.x + self.width + 10), int(self.y + 15)), 2)
        if self.fart_active:
            pygame.draw.ellipse(screen, BROWN, (int(self.x + self.width//2 - self.fart_size//2), int(self.y + self.height), self.fart_size, self.fart_size//2))

    def move(self):
        if not self.abducted:
            self.x += self.speed * self.direction
            if self.x <= 0 or self.x >= WIDTH - self.width:
                self.direction *= -1
            self.y = HEIGHT - self.height - 50

class TractorBeam:
    def __init__(self, ufo):
        self.ufo = ufo
        self.active = False

    def draw(self):
        if self.active:
            apex = (int(self.ufo.x + self.ufo.width//2), int(self.ufo.y + self.ufo.height))
            base_left = (int(self.ufo.x + self.ufo.width//2 - 50), HEIGHT - 50)
            base_right = (int(self.ufo.x + self.ufo.width//2 + 50), HEIGHT - 50)
            for i in range(5):
                alpha = 255 - i * 50
                color = (YELLOW[0], YELLOW[1], YELLOW[2], alpha)
                pygame.draw.polygon(screen, color, [apex, base_left, base_right], 5 - i)

    def check_abduction(self, cow):
        if self.active and not cow.abducted:
            ufo_center = self.ufo.x + self.ufo.width // 2
            cow_center = cow.x + cow.width // 2
            if abs(ufo_center - cow_center) < 50:
                return True
        return False

class Rancher:
    def __init__(self, x):
        self.width = 30
        self.height = 40
        self.x = float(x)
        self.y = float(HEIGHT - self.height - 50)
        self.speed = 1.05
        self.shoot_interval = random.randint(60, 120)
        self.shoot_timer = random.randint(0, self.shoot_interval)
        self.alive = True
        self.respawn_timer = 0

    def draw(self):
        if self.alive:
            pygame.draw.rect(screen, RED, (int(self.x), int(self.y + 10), self.width, self.height - 10))
            pygame.draw.rect(screen, BROWN, (int(self.x - 5), int(self.y - 5), self.width + 10, 10))
            pygame.draw.rect(screen, DARK_RED, (int(self.x + 5), int(self.y), self.width - 10, 5))
            pygame.draw.line(screen, RED, (int(self.x), int(self.y + 20)), (int(self.x - 10), int(self.y + 30)), 5)
            pygame.draw.line(screen, RED, (int(self.x + self.width), int(self.y + 20)), (int(self.x + self.width + 10), int(self.y + 30)), 5)

    def update(self, level):
        if self.alive:
            self.x += self.speed * (1 + (level - 1) * 0.05)
            if self.x <= 0 or self.x >= WIDTH - self.width:
                self.speed *= -1
            self.shoot_timer -= 1
        elif self.respawn_timer > 0:
            self.respawn_timer -= 1
            if self.respawn_timer <= 0:
                self.respawn(level)

    def shoot(self):
        if self.alive and self.shoot_timer <= 0:
            bullets.append(RancherBullet(self.x + self.width//2, self.y))
            if SHOTGUN_SOUND and sound_enabled:
                SHOTGUN_SOUND.play()
            self.shoot_timer = self.shoot_interval

    def respawn(self, level):
        self.x = float(random.randint(0, WIDTH - self.width))
        self.y = float(HEIGHT - self.height - 50)
        self.speed = 1.05 * (1 + (level - 1) * 0.05)
        self.alive = True
        self.shoot_interval = random.randint(60, 120)
        self.shoot_timer = self.shoot_interval

class RancherBullet:
    def __init__(self, x, y):
        self.x = float(x)
        self.y = float(y)
        self.speed = -3.0

    def draw(self):
        pygame.draw.circle(screen, RED, (int(self.x), int(self.y)), 7)
        pygame.draw.circle(screen, DARK_RED, (int(self.x), int(self.y + 5)), 5)

    def move(self):
        self.y += self.speed

class DeathRay:
    def __init__(self, x, y, target):
        self.x = float(x)
        self.y = float(y)
        self.target = target
        self.speed = 5.0
        self.active = True
        self.pulse = 0

    def draw(self):
        if self.active:
            self.pulse = (self.pulse + 1) % 10
            width = 5 + (self.pulse // 5)
            pygame.draw.line(screen, RED, (int(self.x), int(self.y)), 
                           (int(self.target.x + self.target.width//2), int(self.target.y + self.target.height//2)), width)
            pygame.draw.line(screen, (255, 100, 100), (int(self.x), int(self.y)), 
                           (int(self.target.x + self.target.width//2), int(self.target.y + self.target.height//2)), 2)

    def move(self):
        if self.active and self.target.alive:
            dx = self.target.x + self.target.width//2 - self.x
            dy = self.target.y + self.target.height//2 - self.y
            dist = math.hypot(dx, dy)
            if dist > self.speed:
                self.x += (dx / dist) * self.speed
                self.y += (dy / dist) * self.speed
            else:
                self.x = self.target.x + self.target.width//2
                self.y = self.target.y + self.target.height//2
                self.active = False

    def check_hit(self, rancher, ufo, level):
        if not self.active or not rancher.alive:
            return False
        dist = math.dist((self.x, self.y), (rancher.x + rancher.width//2, rancher.y + rancher.height//2))
        if dist < 20:
            rancher.alive = False
            rancher.respawn_timer = max(60, 300 - (level - 1) * 30)
            ufo.health = min(ufo.max_health, ufo.health + 5)
            if random.choice([True, False]) and GRUNT_SOUNDS[0] and sound_enabled:
                random.choice(GRUNT_SOUNDS).play()
            self.active = False
            return True
        return False

class StartMenu:
    def __init__(self):
        self.font = pygame.font.Font(None, 36)
        self.start_options = [
            "Start Game",
            f"Toggle Sound ({pygame.key.name(TOGGLE_SOUND_KEY)})",
            "Quit"
        ]
        self.pause_options = [
            "Resume (ESC)",
            f"Toggle Sound ({pygame.key.name(TOGGLE_SOUND_KEY)})",
            "Quit"
        ]
        self.controls = [
            "Controls:",
            "Arrow Keys - Move UFO",
            "Space - Toggle Tractor Beam",
            "D - Toggle Force Field",
            "F - Shoot Death Ray",
            "M - Toggle Sound",
            "ESC - Pause/Unpause"
        ]
        self.selected = 0
        self.is_start_menu = True

    def draw(self, screen):
        if self.is_start_menu:
            title = self.font.render("Alien Cow Abduction", True, WHITE)
            screen.blit(title, (WIDTH // 2 - 150, HEIGHT // 2 - 200))  # Adjusted for larger screen
            options = self.start_options
            # Draw controls on start menu
            for i, control in enumerate(self.controls):
                text = self.font.render(control, True, WHITE)
                screen.blit(text, (WIDTH // 2 - 150, HEIGHT // 2 + 100 + i * 30))
        else:
            title = self.font.render("Paused", True, WHITE)
            screen.blit(title, (WIDTH // 2 - 70, HEIGHT // 2 - 250))  # Moved higher
            options = self.pause_options
            # Draw controls on pause menu
            for i, control in enumerate(self.controls):
                text = self.font.render(control, True, WHITE)
                screen.blit(text, (WIDTH // 2 - 150, HEIGHT // 2 + 100 + i * 30))

        for i, option in enumerate(options):
            if "Toggle Sound" in option:
                text = self.font.render(f"Toggle Sound ({pygame.key.name(TOGGLE_SOUND_KEY)}) - {'On' if sound_enabled else 'Off'}", True, YELLOW if i == self.selected else WHITE)
            else:
                text = self.font.render(option, True, YELLOW if i == self.selected else WHITE)
            screen.blit(text, (WIDTH // 2 - 150, HEIGHT // 2 - 50 + i * 40))

    def handle_input(self, event):
        global sound_enabled
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_UP:
                self.selected = (self.selected - 1) % len(self.start_options if self.is_start_menu else self.pause_options)
            elif event.key == pygame.K_DOWN:
                self.selected = (self.selected + 1) % len(self.start_options if self.is_start_menu else self.pause_options)
            elif event.key == pygame.K_RETURN:
                if self.is_start_menu:
                    if self.selected == 0:
                        self.is_start_menu = False
                        return False
                    elif self.selected == 1:
                        sound_enabled = not sound_enabled
                        for sound, volume in base_volumes.items():
                            sound.set_volume(volume if sound_enabled else 0.0)
                        pygame.mixer.music.set_volume(0.1 * 0.25 if sound_enabled else 0.0)
                    elif self.selected == 2:
                        pygame.quit()
                        exit()
                else:
                    if self.selected == 0:
                        return False
                    elif self.selected == 1:
                        sound_enabled = not sound_enabled
                        for sound, volume in base_volumes.items():
                            sound.set_volume(volume if sound_enabled else 0.0)
                        pygame.mixer.music.set_volume(0.1 * 0.25 if sound_enabled else 0.0)
                    elif self.selected == 2:
                        pygame.quit()
                        exit()
            elif event.key == pygame.K_ESCAPE and not self.is_start_menu:
                return False
        return True

# Create game objects
cows = [Cow() for _ in range(3)]
ufo = UFO()
tractor_beam = TractorBeam(ufo)
ranchers = [Rancher(i * 250) for i in range(2)]  # Adjusted spacing for larger screen
bullets = []
level = 1
score = 0
level_transition_timer = 0
spawn_timer = 0
menu_active = True
start_menu = StartMenu()

# Generate stars and foreground elements
stars = [(random.randint(0, WIDTH), random.randint(0, HEIGHT - 50)) for _ in range(200)]
hay_bales = [(random.randint(0, WIDTH - 50), random.randint(HEIGHT - 100, HEIGHT - 50)) for _ in range(5)]
crop_circle = (random.randint(100, WIDTH - 100), HEIGHT - 50)
barn_pos = (WIDTH // 2 - 50, HEIGHT - 150)

# Game loop
clock = pygame.time.Clock()
running = True

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif menu_active:
            menu_active = start_menu.handle_input(event)
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                menu_active = True
                start_menu.is_start_menu = False
            elif event.key == pygame.K_SPACE:
                tractor_beam.active = not tractor_beam.active
            elif event.key == pygame.K_d:
                if ufo.force_field_active:
                    ufo.force_field_active = False
                elif ufo.shields > 0:
                    ufo.force_field_active = True
                if ufo.shields <= 0:
                    ufo.force_field_active = False
            elif event.key == pygame.K_f:
                ufo.shoot(ranchers)
            elif event.key == TOGGLE_SOUND_KEY:
                sound_enabled = not sound_enabled
                for sound, volume in base_volumes.items():
                    sound.set_volume(volume if sound_enabled else 0.0)
                pygame.mixer.music.set_volume(0.1 * 0.25 if sound_enabled else 0.0)

    if not menu_active and ufo.health > 0:
        keys = pygame.key.get_pressed()
        x_dir = y_dir = 0
        if keys[pygame.K_LEFT]: x_dir -= 1
        if keys[pygame.K_RIGHT]: x_dir += 1
        if keys[pygame.K_UP]: y_dir -= 1
        if keys[pygame.K_DOWN]: y_dir += 1
        ufo.move(x_dir, y_dir)
        ufo.shoot_timer -= 1
        ufo.update_shields()

        for rancher in ranchers:
            rancher.update(level)
            rancher.shoot()

        spawn_timer -= 1
        max_ranchers = 2 + (level - 1) * 0.5
        spawn_interval = max(120, 600 - (level - 1) * 60)
        if spawn_timer <= 0 and len([r for r in ranchers if r.alive]) < max_ranchers:
            ranchers.append(Rancher(random.randint(0, WIDTH - 30)))
            spawn_timer = spawn_interval

        for cow in cows:
            cow.move()

        for bullet in bullets[:]:
            bullet.move()
            if isinstance(bullet, RancherBullet):
                if (bullet.x > ufo.x and bullet.x < ufo.x + ufo.width and
                    bullet.y > ufo.y and bullet.y < ufo.y + ufo.height):
                    if ufo.force_field_active and ufo.shields > 0:
                        ufo.shields -= 10
                    else:
                        ufo.health -= 10
                    bullets.remove(bullet)
                elif bullet.y < 0:
                    bullets.remove(bullet)
            elif isinstance(bullet, DeathRay):
                hit = False
                for rancher in ranchers[:]:
                    if bullet.check_hit(rancher, ufo, level):
                        hit = True
                        break
                if not bullet.active or hit:
                    bullets.remove(bullet)

        for cow in cows:
            if tractor_beam.check_abduction(cow):
                cow.abducted = True
                cow.abduction_height = cow.y
                cow.fart_active = True
                cow.fart_timer = 30
                cow.fart_size = 0
                if MOO_SOUND and sound_enabled:
                    MOO_SOUND.play()
                if FART_SOUND and sound_enabled:
                    FART_SOUND.play()
                if UFO_SOUNDS[0] and sound_enabled:
                    random.choice(UFO_SOUNDS).play()

            if cow.abducted:
                if cow.y > ufo.y + ufo.height:
                    cow.y -= 2
                    if cow.fart_timer > 0:
                        cow.fart_timer -= 1
                        cow.fart_size += 1
                    else:
                        cow.fart_active = False
                # Only count abduction if cow is above ground level
                if (cow.y <= ufo.y + ufo.height and 
                    cow.x + cow.width > ufo.x and cow.x < ufo.x + ufo.width and
                    cow.y < HEIGHT - cow.height - 50 - 20):  # Must be 20 pixels above ground
                    score += 1
                    ufo.health = min(ufo.health + 5, ufo.max_health)
                    cow.abducted = False
                    cow.y = HEIGHT - cow.height - 50
                    cow.x = random.randint(0, WIDTH - cow.width)
                    cow.fart_active = False
                    cow.fart_timer = 0
                    cow.fart_size = 0
                    cow.direction = random.choice([-1, 1])
                    cow.speed = random.uniform(0.5, 1.0)

        if score % 10 == 0 and score > 0:
            new_level = (score // 10) + 1
            if new_level > level:
                level = new_level
                level_transition_timer = 120
                if LEVEL_UP_SOUND and sound_enabled:
                    LEVEL_UP_SOUND.play()
                for cow in cows:
                    cow.x = random.randint(0, WIDTH - cow.width)
                    cow.y = HEIGHT - cow.height - 50
                    cow.abducted = False
                    cow.fart_active = False
                    cow.fart_timer = 0
                    cow.fart_size = 0
                    cow.direction = random.choice([-1, 1])
                    cow.speed = random.uniform(0.5, 1.0)
                difficulty_multiplier = (1 + (level - 1) * 0.05) * 1.1
                for rancher in ranchers:
                    rancher.speed = 1.05 * difficulty_multiplier
                    rancher.shoot_interval = random.randint(60, 120)
                for bullet in bullets:
                    if isinstance(bullet, RancherBullet):
                        bullet.speed = -3.0 * difficulty_multiplier

        if level_transition_timer > 0:
            level_transition_timer -= 1

    screen.blit(sky_surface, (0, 0))
    for star_x, star_y in stars:
        size = random.randint(1, 3) if random.random() < 0.95 else 4
        pygame.draw.circle(screen, WHITE, (star_x, star_y), size)
    
    pygame.draw.rect(screen, (34, 139, 34), (0, HEIGHT - 50, WIDTH, 50))
    for bale_x, bale_y in hay_bales:
        pygame.draw.circle(screen, HAY_BALE_COLOR, (bale_x + 2, bale_y + 2), 25)
        pygame.draw.circle(screen, HAY_BALE_COLOR, (bale_x, bale_y), 25)
        pygame.draw.circle(screen, BROWN, (bale_x, bale_y), 25, 2)
    pygame.draw.rect(screen, FENCE_COLOR, (0, HEIGHT - 70, WIDTH, 10))
    for x in range(0, WIDTH, 50):
        pygame.draw.rect(screen, FENCE_COLOR, (x, HEIGHT - 80, 5, 20))
    pygame.draw.ellipse(screen, CROP_CIRCLE_COLOR, (crop_circle[0] - 50, crop_circle[1] - 20, 100, 40))
    pygame.draw.rect(screen, DARK_RED, (barn_pos[0], barn_pos[1], 100, 70))
    pygame.draw.polygon(screen, BROWN, [(barn_pos[0], barn_pos[1]), (barn_pos[0] + 50, barn_pos[1] - 30), (barn_pos[0] + 100, barn_pos[1])])
    pygame.draw.rect(screen, BLACK, (barn_pos[0] + 40, barn_pos[1] + 20, 20, 40))

    if not menu_active:
        tractor_beam.draw()
        ufo.draw()
        for cow in cows:
            cow.draw()
        for rancher in ranchers:
            rancher.draw()
        for bullet in bullets:
            bullet.draw()

        font = pygame.font.Font(None, 24)
        score_text = font.render(f"Cows Abducted: {score}", True, WHITE)
        level_text = font.render(f"Level: {level}", True, WHITE)
        screen.blit(score_text, (10, 10))
        screen.blit(level_text, (10, 30))

    if menu_active:
        start_menu.draw(screen)
    elif level_transition_timer > 0:
        transition_text = pygame.font.Font(None, 36).render(f"Level {level}: Increased Resistance!", True, WHITE)
        screen.blit(transition_text, (WIDTH//2 - 150, HEIGHT//2 - 20))

    pygame.display.flip()
    clock.tick(FPS)

pygame.quit()
